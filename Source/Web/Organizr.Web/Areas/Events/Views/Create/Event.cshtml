@model Organizr.Web.Areas.Events.ViewModels.CreateEventViewModel

@{
    ViewBag.Title = "CreateEvent";
}

<h2>Create Event</h2>


@using (Html.BeginForm("Create", "Create", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create Event</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Button trigger modal -->
        <div class="form-group">
            <label for="map-button" class="control-label col-md-2"></label>
            <button id="map-button" type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
                <span class="glyphicon glyphicon-globe open"></span>
            </button>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Coordinates.Longitude, htmlAttributes: new { @class = "control-label col-md-2 hiddenInput" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Coordinates.Longitude, new { htmlAttributes = new { @class = "hiddenInput", id = "longitude" } })
                @Html.ValidationMessageFor(model => model.Coordinates.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Coordinates.Latitude, htmlAttributes: new { @class = "control-label col-md-2 hiddenInput" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Coordinates.Latitude, new { htmlAttributes = new { @class = "hiddenInput", id = "latitude" } })
                @Html.ValidationMessageFor(model => model.Coordinates.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true" data-dismiss="modal">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Select location</h4>
            </div>
            <div class="modal-body">
                <div id="map"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBddP_O11AfDuv9JhojhoYAxczyOXcnN8Q" async defer></script>
    <script defer>
        var mapOpened = false;
        var marker;

        $('#map-button').click(function () {
            if (!mapOpened) {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: -34.397, lng: 150.644 },
                    zoom: 8
                });

                map.addListener("click", function (event) {
                    var latitude = event.latLng.lat();
                    var longtitude = event.latLng.lng();
                    $('#latitude').val(latitude);
                    $('#longitude').val(longtitude);

                    var position = {
                        lat: latitude,
                        lng: longtitude
                    }

                    if (marker != null) {
                        marker.setPosition(position);
                    }
                    else {
                        marker = new google.maps.Marker({
                            position: position,
                            map: map,
                            title: 'Event location'
                        });
                    }
                });

                mapOpened = true;
            }
        });


    </script>
}
